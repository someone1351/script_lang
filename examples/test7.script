
fn myfunc {a b} {
	* a b
}

for i 0 10 {
	if {= 0 {mod i 2}} { # mod is a method (function from rust), so doesn't need to use the "call" command to run it
		println "hello {i}";
	} elif {= 0 {mod i 3}} {	
		println "other3 {} {}" i {call myfunc i 5};
	} else {
		println "other {} {}" i {call myfunc i 5};
	}
}

fn thing {a} {
	#when returning variable, need dollar prefix, everywhere else the prefix is optional
	$a
	#return a
}

call thing 44
thing 44

var v {array 1 {fn {} 123} {fn {a} {+ a 1}}}

v.2 11

fn abc(a b) {
	+ a b 12
}

abc 11 22

var a [array 0 1 2 3]
var i 2
set a.$i 99
println a


var a2 [array 0 [array 1 [array 22]] ]
set a2.1.1.0 1112

println "a2 is {}" a2.1.1.0


var d [dict]
#set d.func {fn {x} {println "hello {x}"}}
fn d.func {x} {println "hello {x}"}

d.func "joe"

