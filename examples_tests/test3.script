

{
	1
}

fn myfunc {a b} {
	* a b
}

fn test {a b} {
	if {< a b} a else b
}

var test2 {fn {a b} {? {< a b} a b}}

println "test {}" {call test 1 2}
println "test {}" {call test 4 3}
println "test {}" {call test2 6 7}


# println("test {}" test2(6 7))
# println("test {}", test2(6, 7))
# dot(a,b)
# {dot a b}
# fn abc (a,b) {+ a b}
# +(1 2)
# +(1, 2)
# [1 2 + 3 *]
# eval [1 + x * 3]
# eval 1 + x * 3
# eval (1 + x) * 3

# [1 + x * 3]
# [1 + x*3]

# rpolish [x 3 * 1 +]
# {rpolish x 3 * 1 +}
# {polish * x 3 + 1}


var b false;
? b {println "y"} {println "n"}
or {and b {println "t"} } {println "f"}



for i 0 10 {
	if {= 0 {mod i 2}} {
		println "hello {i}";
	} elif {= 0 {mod i 3}} {	
		println "other3 {} {}" i {call myfunc i 5};
	} else {
		println "other {} {}" i {call myfunc i 5};
	}
}

var aaa {array 1 2 {array 3 4} 5}

println aaa;
println {get aaa 2 1}

var h {dict :a 1 :b 2 :c 3}
println h
println {get h :b}

+ 1 2

var self;
println "self {}" {h}



#var a 5
#fn myfunc {a b} {* a b}
#func myfunc {a b} {* a b}
#methd abc {a:int b:int} {+ a b}

#var a 5
#function myfunc {a b} {* a b}
#method abc {a:int b:int} {+ a b}

#defv a 5
#defn myfunc {a b} {* a b}
#defm abc {a:int b:int} {+ a b}